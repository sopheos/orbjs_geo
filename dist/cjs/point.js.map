{"version":3,"file":"point.js","names":["Point","exports","lat","arguments","length","undefined","lon","_classCallCheck2","default","_defineProperty2","_createClass2","key","value","setLat","rad_lat","setLon","rad_lon","isNull","getLat","getLon","getLatInt","toInt","getLonInt","getRadLat","Math","PI","getRadLon","latlng","lng","latlon","distanceTo","point","tLat","tLon","pLat","pLon","acos","sin","cos","EARTH_RADIUS","isInside","path","min","max","_this","inside","outer","some","insidePoly","inner","every","vertices","insideVertice","insideGeoJson","geojson","type","coordinates","insideGeoCoordinates","i","coords","fromDegree","fromRadian","fromMn95","e","n","y","x","lon_i","lat_i","l","j","xi","yi","xj","yj","intersect","val","precision","floor","toFloat"],"sources":["../../src/point.ts"],"sourcesContent":["\n/**\n * Point\n */\nexport class Point {\n\n    static readonly EARTH_RADIUS = 6378137;\n\n    private lat: number;\n    private lon: number;\n    private rad_lat: number | null = null;\n    private rad_lon: number | null = null\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    public constructor(lat: number = 0, lon: number = 0) {\n        this.lat = lat;\n        this.lon = lon;\n    }\n\n    public static fromDegree(lat: number = 0, lon: number = 0): Point {\n        return new Point(lat, lon);\n    }\n\n    public static fromRadian(lat: number = 0, lon: number = 0): Point {\n        return new Point(lat * 180 / Math.PI, lon * 180 / Math.PI);\n    }\n\n    public static fromMn95(e: number = 0, n: number = 0): Point {\n        // Convertir les coordonnées de projection E (coordonnée est) \n        // et N (coordonnée nord) en MN95 \n        // dans le système civil (Berne = 0 / 0) \n        // et exprimer dans l'unité [1000 km]\n        let y = (e - 2600000) / 1000000;\n        let x = (n - 1200000) / 1000000;\n\n        // Calculer la longitude et la latitude dans l'unité [10000\"]\n        let lon_i = 2.6779094;\n        lon_i += 4.728982 * y;\n        lon_i += + 0.791484 * y * x;\n        lon_i += 0.1306 * y * x * x;\n        lon_i -= 0.0436 * y * y * y;\n\n        let lat_i = 16.9023892;\n        lat_i += 3.238272 * x;\n        lat_i -= 0.270978 * y * y;\n        lat_i -= 0.002528 * x * x;\n        lat_i -= 0.0447 * y * y * x;\n        lat_i -= 0.0140 * x * x * x;\n\n        // Convertir la longitude et la latitude dans l'unité [°]\n        let lon = lon_i * 100 / 36;\n        let lat = lat_i * 100 / 36;\n\n        return new Point(lat, lon);\n    }\n\n    // -------------------------------------------------------------------------\n    // Setter\n    // -------------------------------------------------------------------------\n\n    public setLat(lat: number): Point {\n        this.lat = lat;\n        this.rad_lat = null;\n        return this;\n    }\n\n    public setLon(lon: number): Point {\n        this.lon = lon;\n        this.rad_lon = null;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Getter\n    // -------------------------------------------------------------------------\n\n    public isNull(): boolean {\n        return this.lat === 0 && this.lon === 0;\n    }\n\n    public getLat(): number {\n        return this.lat;\n    }\n\n    public getLon(): number {\n        return this.lon;\n    }\n\n    public getLatInt(): number {\n        return Point.toInt(this.lat);\n    }\n\n    public getLonInt(): number {\n        return Point.toInt(this.lon);\n    }\n\n    public getRadLat(): number {\n        if (this.rad_lat === null) {\n            this.rad_lat = this.lat * Math.PI / 180;\n        }\n\n        return this.rad_lat;\n    }\n\n    public getRadLon(): number {\n        if (this.rad_lon === null) {\n            this.rad_lon = this.lon * Math.PI / 180;\n        }\n\n        return this.rad_lon;\n    }\n\n    public latlng(): any {\n        return { lat: this.lat, lng: this.lon };\n    }\n\n    public latlon(): any {\n        return { lat: this.lat, lon: this.lon };\n    }\n\n    // -------------------------------------------------------------------------\n    // Tools\n    // -------------------------------------------------------------------------\n\n\n    public distanceTo(point: Point): number {\n\n        let tLat = this.getRadLat();\n        let tLon = this.getRadLon();\n        let pLat = point.getRadLat();\n        let pLon = point.getRadLon();\n\n        return Math.acos(Math.sin(tLat) * Math.sin(pLat) +\n            Math.cos(tLat) * Math.cos(pLat) *\n            Math.cos(tLon - pLon)) * Point.EARTH_RADIUS;\n    }\n\n    public isInside(path: any, min: Point, max: Point): boolean {\n\n        let inside = false;\n\n        if (min && max) {\n            inside = this.getLat() >= min.getLat()\n                && this.getLat() <= max.getLat()\n                && this.getLon() >= min.getLon()\n                && this.getLon() <= max.getLon();\n\n            if (inside === false) return inside;\n        }\n\n        if (!path) return inside;\n\n        if (path.outer && path.outer.length) {\n            path.outer.some((outer: number[][]) => {\n                inside = this.insidePoly(outer);\n                return inside;\n            });\n        }\n\n        if (inside && path.inner && path.inner.length) {\n            path.inner.every((inner: number[][]) => {\n                inside = this.insidePoly(inner);\n                return inside;\n            });\n        }\n\n        return inside;\n    }\n\n    public insidePoly(vertices: number[][]): boolean {\n        return Point.insideVertice(this.lat, this.lon, vertices);\n    }\n\n    public insideGeoJson(geojson: any) {\n        \n        if(! geojson.type || ! geojson.coordinates) {\n            return false;\n        }\n\n        if(geojson.type === 'Polygon') {\n            return this.insideGeoCoordinates(geojson.coordinates)\n        } else if(geojson.type === 'MultiPolygon') {\n            for(let i = 0; i < geojson.coordinates.length; i++) {\n                if(this.insideGeoCoordinates(geojson.coordinates[i])) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    private insideGeoCoordinates(coords: number[][][]) {\n        if(! coords.length) {\n            return false;\n        }\n\n        let inside = Point.insideVertice(this.lon, this.lat, coords[0]);\n\n        // Holes\n        if(inside && coords.length > 1) {\n            for(let i = 1; i < coords.length; i++) {\n                if(Point.insideVertice(this.lon, this.lat, coords[i])) {\n                    return false;\n                }\n            }\n        }\n\n        return inside;\n    }\n\n    public static insideVertice(x: number, y: number, vertices: number[][]): boolean {\n        let inside = false;\n\n        let l = vertices.length;\n        let i = 0;\n        let j = l - 1;\n\n        for (; i < l; j = i++) {\n\n            let xi = vertices[i][0];\n            let yi = vertices[i][1];\n            let xj = vertices[j][0];\n            let yj = vertices[j][1];\n\n            let intersect = ((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi);\n\n            if (intersect) inside = !inside;\n        }\n\n        return inside;\n    }\n\n    public static toInt(val: number, precision: number = 1000000): number {\n        return Math.floor(val * precision);\n    }\n\n    public static toFloat(val: number, precision: number = 1000000): number {\n        return val / precision;\n    }\n\n}"],"mappings":"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","ignoreList":[]}